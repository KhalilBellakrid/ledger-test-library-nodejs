// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from example.djinni

#include "NJSCppInterfaceCpp.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSCppInterface::getCppVersion) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCppInterface::getCppVersion needs 1 arguments");
    }

    //Check if parameters have correct types
    String::Utf8Value string_0(info[0]->ToString());
    auto arg_0 = std::string(*string_0);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSCppInterface* obj = Nan::ObjectWrap::Unwrap<NJSCppInterface>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCppInterface::getCppVersion : implementation of CppInterface is not valid");
    }

    auto result = cpp_impl->getCppVersion(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Int32>(result);

    //Return result
    info.GetReturnValue().Set(arg_1);
}

NAN_METHOD(NJSCppInterface::New) {

    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSCppInterface function can only be called as constructor (use New)");
    }
    NJSCppInterface *node_instance = new NJSCppInterface(nullptr);

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        info.GetReturnValue().Set(info.This());
    }
}


Nan::Persistent<ObjectTemplate> NJSCppInterface::CppInterface_prototype;

Handle<Object> NJSCppInterface::wrap(const std::shared_ptr<testapp::CppInterface> &object) {

    Local<ObjectTemplate> local_prototype = Nan::New(CppInterface_prototype);

    Handle<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance();
        NJSCppInterface *new_obj = new NJSCppInterface(object);
        if(new_obj)
        {
            new_obj->Wrap(obj);
        }
    }
    else
    {
        Nan::ThrowError("NJSCppInterface::wrap: object template not valid");
    }
    return obj;
}

void NJSCppInterface::Initialize(Local<Object> target) {

    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSCppInterface::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSCppInterface").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"getCppVersion", getCppVersion);
    //Set object prototype
    CppInterface_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSCppInterface").ToLocalChecked(), func_template->GetFunction());
}
