// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from view_model.djinni

#include "NJSItfHandleResponse.hpp"

using namespace v8;
using namespace node;
using namespace std;

void NJSItfHandleResponse::respond(const Response & result)
{
    //Wrap parameters
    auto arg_0 = Nan::New<Object>();
    auto arg_0_1 = Nan::New<String>(result.error).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("error").ToLocalChecked(), arg_0_1);
    auto arg_0_2 = Nan::New<String>(result.result).ToLocalChecked();
    Nan::DefineOwnProperty(arg_0, Nan::New<String>("result").ToLocalChecked(), arg_0_2);

    Handle<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSItfHandleResponse::respond fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("respond").ToLocalChecked()).ToLocalChecked();
    auto handle = this->handle();
    auto result_respond = Nan::CallAsFunction(calling_funtion->ToObject(),handle,1,args);
    if(result_respond.IsEmpty())
    {
        Nan::ThrowError("NJSItfHandleResponse::respond call failed");
    }
}

NAN_METHOD(NJSItfHandleResponse::addRef) {

    NJSItfHandleResponse *obj = Nan::ObjectWrap::Unwrap<NJSItfHandleResponse>(info.This());
    obj->Ref();
}

NAN_METHOD(NJSItfHandleResponse::removeRef) {

    NJSItfHandleResponse *obj = Nan::ObjectWrap::Unwrap<NJSItfHandleResponse>(info.This());
    obj->Unref();
}

NAN_METHOD(NJSItfHandleResponse::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSItfHandleResponse function can only be called as constructor (use New)");
    }

    NJSItfHandleResponse *node_instance = nullptr;
    if(info[0]->IsObject())
    {
        node_instance = new NJSItfHandleResponse(info[0]->ToObject());
    }
    else
    {
        return Nan::ThrowError("NJSItfHandleResponse::New requires an implementation from node");
    }

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}

void NJSItfHandleResponse::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSItfHandleResponse::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSItfHandleResponse").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"addRef", addRef);
    Nan::SetPrototypeMethod(func_template,"removeRef", removeRef);

    //Add template to target
    target->Set(Nan::New<String>("NJSItfHandleResponse").ToLocalChecked(), func_template->GetFunction());
}
