// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from thread.djinni

#include "NJSItfThreadDispatcher.hpp"

using namespace v8;
using namespace node;
using namespace std;


std::shared_ptr<ExecutionContext> NJSItfThreadDispatcher::getSerialExecutionContext(const std::string & name)
{

    Nan::HandleScope scope;
    Local<Context> context = Nan::GetCurrentContext();
    //Wrap parameters
    auto arg_0 = Nan::New<String>(name).ToLocalChecked();

    Handle<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSItfThreadDispatcher::getSerialExecutionContext fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getSerialExecutionContext").ToLocalChecked()).ToLocalChecked();
    auto handle = this->handle();
    auto result = Nan::CallAsFunction(calling_funtion->ToObject(),handle,1,args);
    if(result.IsEmpty())
    {
        Nan::ThrowError("NJSItfThreadDispatcher::getSerialExecutionContext call failed");
    }
    auto checkedResult = result.ToLocalChecked();
    Local<Object> njs_arg_2 = checkedResult->ToObject(context).ToLocalChecked();

    NJSItfExecutionContext *njs_obj_2 = static_cast<NJSItfExecutionContext *>(Nan::GetInternalFieldPointer(njs_arg_2,0));

    std::shared_ptr<NJSItfExecutionContext> arg_2(njs_obj_2);

    return arg_2;
}

std::shared_ptr<ExecutionContext> NJSItfThreadDispatcher::getThreadPoolExecutionContext(const std::string & name)
{

    Nan::HandleScope scope;
    Local<Context> context = Nan::GetCurrentContext();
    //Wrap parameters
    auto arg_0 = Nan::New<String>(name).ToLocalChecked();

    Handle<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSItfThreadDispatcher::getThreadPoolExecutionContext fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getThreadPoolExecutionContext").ToLocalChecked()).ToLocalChecked();
    auto handle = this->handle();
    auto result = Nan::CallAsFunction(calling_funtion->ToObject(),handle,1,args);
    if(result.IsEmpty())
    {
        Nan::ThrowError("NJSItfThreadDispatcher::getThreadPoolExecutionContext call failed");
    }
    auto checkedResult = result.ToLocalChecked();
    Local<Object> njs_arg_2 = checkedResult->ToObject(context).ToLocalChecked();

    NJSItfExecutionContext *njs_obj_2 = static_cast<NJSItfExecutionContext *>(Nan::GetInternalFieldPointer(njs_arg_2,0));

    std::shared_ptr<NJSItfExecutionContext> arg_2(njs_obj_2);

    return arg_2;
}

std::shared_ptr<ExecutionContext> NJSItfThreadDispatcher::getMainExecutionContext()
{

    Nan::HandleScope scope;
    Local<Context> context = Nan::GetCurrentContext();
    //Wrap parameters

    Handle<Value> args[0] = {};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSItfThreadDispatcher::getMainExecutionContext fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("getMainExecutionContext").ToLocalChecked()).ToLocalChecked();
    auto handle = this->handle();
    auto result = Nan::CallAsFunction(calling_funtion->ToObject(),handle,0,args);
    if(result.IsEmpty())
    {
        Nan::ThrowError("NJSItfThreadDispatcher::getMainExecutionContext call failed");
    }
    auto checkedResult = result.ToLocalChecked();
    Local<Object> njs_arg_1 = checkedResult->ToObject(context).ToLocalChecked();

    NJSItfExecutionContext *njs_obj_1 = static_cast<NJSItfExecutionContext *>(Nan::GetInternalFieldPointer(njs_arg_1,0));

    std::shared_ptr<NJSItfExecutionContext> arg_1(njs_obj_1);

    return arg_1;
}

std::shared_ptr<Lock> NJSItfThreadDispatcher::newLock()
{

    Nan::HandleScope scope;
    Local<Context> context = Nan::GetCurrentContext();
    //Wrap parameters

    Handle<Value> args[0] = {};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSItfThreadDispatcher::newLock fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("newLock").ToLocalChecked()).ToLocalChecked();
    auto handle = this->handle();
    auto result = Nan::CallAsFunction(calling_funtion->ToObject(),handle,0,args);
    if(result.IsEmpty())
    {
        Nan::ThrowError("NJSItfThreadDispatcher::newLock call failed");
    }
    auto checkedResult = result.ToLocalChecked();
    Local<Object> njs_arg_1 = checkedResult->ToObject(context).ToLocalChecked();

    NJSItfLock *njs_obj_1 = static_cast<NJSItfLock *>(Nan::GetInternalFieldPointer(njs_arg_1,0));

    std::shared_ptr<NJSItfLock> arg_1(njs_obj_1);

    return arg_1;
}
NAN_METHOD(NJSItfThreadDispatcher::addRef) {

    NJSItfThreadDispatcher *obj = Nan::ObjectWrap::Unwrap<NJSItfThreadDispatcher>(info.This());
    obj->Ref();
}

NAN_METHOD(NJSItfThreadDispatcher::removeRef) {

    NJSItfThreadDispatcher *obj = Nan::ObjectWrap::Unwrap<NJSItfThreadDispatcher>(info.This());
    obj->Unref();
}

NAN_METHOD(NJSItfThreadDispatcher::New) {

    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSItfThreadDispatcher function can only be called as constructor (use New)");
    }

    NJSItfThreadDispatcher *node_instance = nullptr;
    if(info[0]->IsObject())
    {
        node_instance = new NJSItfThreadDispatcher(info[0]->ToObject());
    }
    else
    {
        return Nan::ThrowError("NJSItfThreadDispatcher::New requires an implementation from node");
    }

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}

void NJSItfThreadDispatcher::Initialize(Local<Object> target) {

    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSItfThreadDispatcher::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSItfThreadDispatcher").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"addRef", addRef);
    Nan::SetPrototypeMethod(func_template,"removeRef", removeRef);

    //Add template to target
    target->Set(Nan::New<String>("NJSItfThreadDispatcher").ToLocalChecked(), func_template->GetFunction());
}
