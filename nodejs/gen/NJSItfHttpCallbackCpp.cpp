// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from http.djinni

#include "NJSItfHttpCallbackCpp.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSItfHttpCallback::on_network_error) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSItfHttpCallback::on_network_error needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSItfHttpCallback* obj = Nan::ObjectWrap::Unwrap<NJSItfHttpCallback>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSItfHttpCallback::on_network_error : implementation of HttpCallback is not valid");
    }

    cpp_impl->on_network_error();
}

NAN_METHOD(NJSItfHttpCallback::on_success) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSItfHttpCallback::on_success needs 2 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<int32_t>(info[0]).FromJust();
    String::Utf8Value string_1(info[1]->ToString());
    auto arg_1 = std::string(*string_1);

    //Unwrap current object and retrieve its Cpp Implementation
    NJSItfHttpCallback* obj = Nan::ObjectWrap::Unwrap<NJSItfHttpCallback>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSItfHttpCallback::on_success : implementation of HttpCallback is not valid");
    }

    cpp_impl->on_success(arg_0, arg_1);
}

NAN_METHOD(NJSItfHttpCallback::New) {

    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSItfHttpCallback function can only be called as constructor (use New)");
    }
    NJSItfHttpCallback *node_instance = new NJSItfHttpCallback(nullptr);

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}


Nan::Persistent<ObjectTemplate> NJSItfHttpCallback::HttpCallback_prototype;

Handle<Object> NJSItfHttpCallback::wrap(const std::shared_ptr<ledgerapp_gen::HttpCallback> &object) {

    Local<ObjectTemplate> local_prototype = Nan::New(HttpCallback_prototype);

    Handle<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance();
        NJSItfHttpCallback *new_obj = new NJSItfHttpCallback(object);
        if(new_obj)
        {
            new_obj->Wrap(obj);
            new_obj->Ref();
        }
    }
    else
    {
        Nan::ThrowError("NJSItfHttpCallback::wrap: object template not valid");
    }
    return obj;
}

void NJSItfHttpCallback::Initialize(Local<Object> target) {

    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSItfHttpCallback::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSItfHttpCallback").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"on_network_error", on_network_error);
    Nan::SetPrototypeMethod(func_template,"on_success", on_success);
    //Set object prototype
    HttpCallback_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSItfHttpCallback").ToLocalChecked(), func_template->GetFunction());
}
