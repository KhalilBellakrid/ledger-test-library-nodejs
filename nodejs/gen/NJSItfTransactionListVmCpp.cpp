// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from view_model.djinni

#include "NJSItfTransactionListVmCpp.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSItfTransactionListVm::count) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSItfTransactionListVm::count needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    NJSItfTransactionListVm* obj = Nan::ObjectWrap::Unwrap<NJSItfTransactionListVm>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSItfTransactionListVm::count : implementation of TransactionListVm is not valid");
    }

    auto result = cpp_impl->count();

    //Wrap result in node object
    auto arg_0 = Nan::New<Int32>(result);

    //Return result
    info.GetReturnValue().Set(arg_0);
}

NAN_METHOD(NJSItfTransactionListVm::getTransaction) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSItfTransactionListVm::getTransaction needs 1 arguments");
    }

    //Check if parameters have correct types
    auto arg_0 = Nan::To<int32_t>(info[0]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    NJSItfTransactionListVm* obj = Nan::ObjectWrap::Unwrap<NJSItfTransactionListVm>(info.This());
    auto cpp_impl = obj->getCppImpl();
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSItfTransactionListVm::getTransaction : implementation of TransactionListVm is not valid");
    }

    auto result = cpp_impl->getTransaction(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<Object>();
    auto arg_2 = Nan::New<String>((*result).tx_hash).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("tx_hash").ToLocalChecked(), arg_2);
    auto arg_3 = Nan::New<String>((*result).received_at).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("received_at").ToLocalChecked(), arg_3);
    auto arg_4 = Nan::New<String>((*result).tx_data).ToLocalChecked();
    Nan::DefineOwnProperty(arg_1, Nan::New<String>("tx_data").ToLocalChecked(), arg_4);


    //Return result
    info.GetReturnValue().Set(arg_1);
}

NAN_METHOD(NJSItfTransactionListVm::New) {

    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSItfTransactionListVm function can only be called as constructor (use New)");
    }
    NJSItfTransactionListVm *node_instance = new NJSItfTransactionListVm(nullptr);

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}


Nan::Persistent<ObjectTemplate> NJSItfTransactionListVm::TransactionListVm_prototype;

Handle<Object> NJSItfTransactionListVm::wrap(const std::shared_ptr<ledgerapp_gen::TransactionListVm> &object) {

    Local<ObjectTemplate> local_prototype = Nan::New(TransactionListVm_prototype);

    Handle<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance();
        NJSItfTransactionListVm *new_obj = new NJSItfTransactionListVm(object);
        if(new_obj)
        {
            new_obj->Wrap(obj);
            new_obj->Ref();
        }
    }
    else
    {
        Nan::ThrowError("NJSItfTransactionListVm::wrap: object template not valid");
    }
    return obj;
}

void NJSItfTransactionListVm::Initialize(Local<Object> target) {

    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSItfTransactionListVm::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSItfTransactionListVm").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"count", count);
    Nan::SetPrototypeMethod(func_template,"getTransaction", getTransaction);
    //Set object prototype
    TransactionListVm_prototype.Reset(objectTemplate);

    //Add template to target
    target->Set(Nan::New<String>("NJSItfTransactionListVm").ToLocalChecked(), func_template->GetFunction());
}
