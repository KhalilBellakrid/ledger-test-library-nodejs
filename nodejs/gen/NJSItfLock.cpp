// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from async.djinni

#include "NJSItfLock.hpp"

using namespace v8;
using namespace node;
using namespace std;


void NJSItfLock::lock()
{
    //Wrap parameters

    Handle<Value> args[0] = {};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSItfLock::lock fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("lock").ToLocalChecked()).ToLocalChecked();
    auto handle = this->handle();
    auto result_lock = Nan::CallAsFunction(calling_funtion->ToObject(),handle,0,args);
    if(result_lock.IsEmpty())
    {
        Nan::ThrowError("NJSItfLock::lock call failed");
    }
}

bool NJSItfLock::tryLock()
{
    //Wrap parameters

    Handle<Value> args[0] = {};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSItfLock::tryLock fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("tryLock").ToLocalChecked()).ToLocalChecked();
    auto handle = this->handle();
    auto result_tryLock = Nan::CallAsFunction(calling_funtion->ToObject(),handle,0,args);
    if(result_tryLock.IsEmpty())
    {
        Nan::ThrowError("NJSItfLock::tryLock call failed");
    }
    auto checkedResult_tryLock = result_tryLock.ToLocalChecked();
    auto fResult_tryLock = Nan::To<bool>(checkedResult_tryLock).FromJust();
    return fResult_tryLock;
}

void NJSItfLock::unlock()
{
    //Wrap parameters

    Handle<Value> args[0] = {};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSItfLock::unlock fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("unlock").ToLocalChecked()).ToLocalChecked();
    auto handle = this->handle();
    auto result_unlock = Nan::CallAsFunction(calling_funtion->ToObject(),handle,0,args);
    if(result_unlock.IsEmpty())
    {
        Nan::ThrowError("NJSItfLock::unlock call failed");
    }
}
NAN_METHOD(NJSItfLock::addRef) {

    NJSItfLock *obj = Nan::ObjectWrap::Unwrap<NJSItfLock>(info.This());
    obj->Ref();
}

NAN_METHOD(NJSItfLock::removeRef) {

    NJSItfLock *obj = Nan::ObjectWrap::Unwrap<NJSItfLock>(info.This());
    obj->Unref();
}

NAN_METHOD(NJSItfLock::New) {

    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSItfLock function can only be called as constructor (use New)");
    }

    NJSItfLock *node_instance = nullptr;
    if(info[0]->IsObject())
    {
        node_instance = new NJSItfLock(info[0]->ToObject());
    }
    else
    {
        return Nan::ThrowError("NJSItfLock::New requires an implementation from node");
    }

    if(node_instance)
    {
        //Wrap and return node instance
        node_instance->Wrap(info.This());
        node_instance->Ref();
        info.GetReturnValue().Set(info.This());
    }
}

void NJSItfLock::Initialize(Local<Object> target) {

    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSItfLock::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSItfLock").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"addRef", addRef);
    Nan::SetPrototypeMethod(func_template,"removeRef", removeRef);

    //Add template to target
    target->Set(Nan::New<String>("NJSItfLock").ToLocalChecked(), func_template->GetFunction());
}
